import unittest
from valid_sudoku import Solution

class Tests(unittest.TestCase): 

    def test_is_valid_sudoku_1(self):
        board = \
                [["8","3",".",  ".","7",".",  ".",".","."]
                ,["6",".",".",  "1","9","5",  ".",".","."]
                ,[".","9","8",  ".",".",".",  ".","6","."]

                ,["8",".",".",  ".","6",".",  ".",".","3"]
                ,["4",".",".",  "8",".","3",  ".",".","1"]
                ,["7",".",".",  ".","2",".",  ".",".","6"]

                ,[".","6",".",  ".",".",".",  "2","8","."]
                ,[".",".",".",  "4","1","9",  ".",".","5"]
                ,[".",".",".",  ".","8",".",  ".","7","9"]]
        
        actual = Solution.isValidSudoku(board)
        expected = False
        
        self.assertEqual(actual, expected)

    def test_is_valid_sudoku_2(self):
        board = \
                [["5","3",".", ".","7",".", ".",".","."]
                ,["6",".",".", "1","9","5", ".",".","."]
                ,[".","9","8", ".",".",".", ".","6","."]

                ,["8",".",".", ".","6",".", ".",".","3"]
                ,["4",".",".", "8",".","3", ".",".","1"]
                ,["7",".",".", ".","2",".", ".",".","6"]

                ,[".","6",".", ".",".",".", "2","8","."]
                ,[".",".",".", "4","1","9", ".",".","5"]
                ,[".",".",".", ".","8",".", ".","7","9"]]
        
        actual = Solution.isValidSudoku(board)
        expected = True
        
        self.assertEqual(actual, expected)

    def test_is_valid_sudoku_3(self):
        board = \
                [[".",".",".", ".",".",".", ".",".","."]
                ,[".",".",".", ".",".",".", ".",".","."]
                ,[".",".",".", ".",".",".", ".",".","."]

                ,[".",".",".", ".",".",".", ".",".","."]
                ,[".",".",".", ".",".",".", ".",".","."]
                ,[".",".",".", ".",".",".", ".",".","."]

                ,[".",".",".", ".",".",".", ".",".","."]
                ,[".",".",".", ".",".",".", ".",".","."]
                ,[".",".",".", ".",".",".", ".",".","."]]
        
        actual = Solution.isValidSudoku(board)
        expected = True
        
        self.assertEqual(actual, expected)

    def test_is_valid_sudoku_4(self):
        # duplicates in row
        board = \
                [["8","3",".",  ".","7",".",  ".",".","."]
                ,["6",".",".",  "1","9","5",  ".",".","."]
                ,[".","9","1",  ".",".",".",  ".","6","."]

                ,["1",".",".",  ".","6",".",  ".",".","3"]
                ,["4",".",".",  "8","4","3",  ".",".","1"]
                ,["7",".",".",  ".","2",".",  ".",".","6"]

                ,[".","6",".",  ".",".",".",  "2","8","."]
                ,[".",".",".",  "4","1","9",  ".",".","5"]
                ,[".",".",".",  ".","8",".",  ".","7","9"]]
        
        actual = Solution.isValidSudoku(board)
        expected = False

    def test_is_valid_sudoku_5(self):
        # duplicates in column
        board = \
                [["8","3",".",  ".","7",".",  ".",".","."]
                ,["6",".",".",  "1","9","5",  ".",".","."]
                ,[".","9","1",  ".",".",".",  ".","6","."]

                ,["8",".",".",  ".","6",".",  ".",".","3"]
                ,["4",".",".",  "8",".","3",  ".",".","1"]
                ,["7",".",".",  ".","2",".",  ".",".","6"]

                ,[".","6",".",  ".",".",".",  "2","8","."]
                ,[".",".",".",  "4","1","9",  ".",".","5"]
                ,[".",".",".",  ".","8",".",  ".","7","9"]]
        
        actual = Solution.isValidSudoku(board)
        expected = False

    def test_is_valid_sudoku_6(self):
        # duplicates in square
        board = \
                [["8","3",".",  ".","7",".",  ".",".","."]
                ,["6",".",".",  "1","9","5",  ".",".","."]
                ,[".","9","1",  ".",".",".",  ".","6","."]

                ,["1",".",".",  ".","6",".",  ".",".","3"]
                ,["4",".",".",  "8","1","3",  ".",".","1"]
                ,["7",".",".",  ".","2","1",  ".",".","6"]

                ,[".","6",".",  ".",".",".",  "2","8","."]
                ,[".",".",".",  "4","1","9",  ".",".","5"]
                ,[".",".",".",  ".","8",".",  ".","7","9"]]
        
        actual = Solution.isValidSudoku(board)
        expected = False



if __name__ == '__main__':

    unittest.main(exit=False)